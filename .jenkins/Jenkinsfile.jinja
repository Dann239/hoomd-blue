pipeline
    {
    options { skipDefaultCheckout() }
    agent none

    stages
        {
        {% for test in tests %}stage('{{ test.name }}')
            {
            agent { label '{{ test.agent }}' }

            environment
                {
                CC = '{{ test.CC }}'
                CXX = '{{ test.CXX }}'
                PYVER = '{{ test.PYVER }}'
                CMAKE_BIN = '{{ test.CMAKE_BIN }}'
                ENABLE_CUDA = '{{ test.ENABLE_CUDA }}'
                ENABLE_MPI = '{{ test.ENABLE_MPI }}'
                ENABLE_TBB = '{{ test.ENABLE_TBB }}'
                BUILD_VALIDATION = '{{ test.BUILD_VALIDATION }}'
                CONTAINER = '/nfs/glotzer/containers/{{ test.CONTAINER }}'
                BUILD_JIT = '{{ test.BUILD_JIT }}'
                OMP_NUM_THREADS = '{{ test.OMP_NUM_THREADS }}'
                }

            steps
                {
                sh 'echo ${NODE_NAME}'

                dir('code')
                    {
                    checkout scm
                    sh 'git submodule update --init'
                    }

                dir('build')
                    {
                    timeout(time: 1, unit: 'HOURS')
                        {
                        sh '''
                            singularity exec --nv ${CONTAINER} ${CMAKE_BIN}/cmake ../code -DPYTHON_EXECUTABLE=/usr/bin/python${PYVER} -DENABLE_CUDA=${ENABLE_CUDA} -DENABLE_MPI=${ENABLE_MPI} -DENABLE_TBB=${ENABLE_TBB} -DBUILD_VALIDATION=${BUILD_VALIDATION} -DTEST_CPU_IN_GPU_BUILDS=OFF -DBUILD_DEPRECATED=off -DBUILD_JIT=${BUILD_JIT} -GNinja
                           '''

                        sh 'singularity exec --nv ${CONTAINER} ninja -j 3'
                        }

                    timeout(time: {{ test.timeout }}, unit: 'HOURS')
                        {
                        sh '''
                            singularity exec --nv ${CONTAINER} ${CMAKE_BIN}/ctest --no-compress-output -T test --output-on-failure
                           '''
                        }
                    }

                sh 'xsltproc code/.jenkins/ctest2junit.xsl build/Testing/**/Test.xml > ./test.xml'

                junit 'test.xml'
                }
            post
                {
                always
                    {
                    archive 'build/Testing/**/Test.xml'
                    deleteDir()
                    }
                }
            }
        {% endfor %}
        }
    }
